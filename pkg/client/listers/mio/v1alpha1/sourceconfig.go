/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "hidevops.io/mioclient/pkg/apis/mio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SourceConfigLister helps list SourceConfigs.
type SourceConfigLister interface {
	// List lists all SourceConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SourceConfig, err error)
	// SourceConfigs returns an object that can list and get SourceConfigs.
	SourceConfigs(namespace string) SourceConfigNamespaceLister
	SourceConfigListerExpansion
}

// sourceConfigLister implements the SourceConfigLister interface.
type sourceConfigLister struct {
	indexer cache.Indexer
}

// NewSourceConfigLister returns a new SourceConfigLister.
func NewSourceConfigLister(indexer cache.Indexer) SourceConfigLister {
	return &sourceConfigLister{indexer: indexer}
}

// List lists all SourceConfigs in the indexer.
func (s *sourceConfigLister) List(selector labels.Selector) (ret []*v1alpha1.SourceConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourceConfig))
	})
	return ret, err
}

// SourceConfigs returns an object that can list and get SourceConfigs.
func (s *sourceConfigLister) SourceConfigs(namespace string) SourceConfigNamespaceLister {
	return sourceConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SourceConfigNamespaceLister helps list and get SourceConfigs.
type SourceConfigNamespaceLister interface {
	// List lists all SourceConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SourceConfig, err error)
	// Get retrieves the SourceConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SourceConfig, error)
	SourceConfigNamespaceListerExpansion
}

// sourceConfigNamespaceLister implements the SourceConfigNamespaceLister
// interface.
type sourceConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SourceConfigs in the indexer for a given namespace.
func (s sourceConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SourceConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SourceConfig))
	})
	return ret, err
}

// Get retrieves the SourceConfig from the indexer for a given namespace and name.
func (s sourceConfigNamespaceLister) Get(name string) (*v1alpha1.SourceConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sourceconfig"), name)
	}
	return obj.(*v1alpha1.SourceConfig), nil
}
