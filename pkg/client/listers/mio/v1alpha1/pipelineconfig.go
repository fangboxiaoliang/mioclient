/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "hidevops.io/mioclient/pkg/apis/mio/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineConfigLister helps list PipelineConfigs.
type PipelineConfigLister interface {
	// List lists all PipelineConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineConfig, err error)
	// PipelineConfigs returns an object that can list and get PipelineConfigs.
	PipelineConfigs(namespace string) PipelineConfigNamespaceLister
	PipelineConfigListerExpansion
}

// pipelineConfigLister implements the PipelineConfigLister interface.
type pipelineConfigLister struct {
	indexer cache.Indexer
}

// NewPipelineConfigLister returns a new PipelineConfigLister.
func NewPipelineConfigLister(indexer cache.Indexer) PipelineConfigLister {
	return &pipelineConfigLister{indexer: indexer}
}

// List lists all PipelineConfigs in the indexer.
func (s *pipelineConfigLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineConfig))
	})
	return ret, err
}

// PipelineConfigs returns an object that can list and get PipelineConfigs.
func (s *pipelineConfigLister) PipelineConfigs(namespace string) PipelineConfigNamespaceLister {
	return pipelineConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineConfigNamespaceLister helps list and get PipelineConfigs.
type PipelineConfigNamespaceLister interface {
	// List lists all PipelineConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PipelineConfig, err error)
	// Get retrieves the PipelineConfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PipelineConfig, error)
	PipelineConfigNamespaceListerExpansion
}

// pipelineConfigNamespaceLister implements the PipelineConfigNamespaceLister
// interface.
type pipelineConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineConfigs in the indexer for a given namespace.
func (s pipelineConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PipelineConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PipelineConfig))
	})
	return ret, err
}

// Get retrieves the PipelineConfig from the indexer for a given namespace and name.
func (s pipelineConfigNamespaceLister) Get(name string) (*v1alpha1.PipelineConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pipelineconfig"), name)
	}
	return obj.(*v1alpha1.PipelineConfig), nil
}
